import numpy as np


def F(x1, x2, x3, x4):
     return 1.6*x1**2 - 2*x1*x2 + 2*x1*x4 + 4.6*x2**2 + 2*x2*x3 + 5.6*x3**2 + 2*x4**2


def grad_F(x):
     return [3.2 * x[0] - 2 * x[1] + 2 * x[3] + 2.2, - 2 * x[0] + 9.2 * x[1] + 2 * x[2] - 1, 2 * x[1] + 11.2 * x[2] + 0.8, 2 * x[0] + 4 * x[3] + 3]


def fast(A, x, e):
     l = 0.14
     n = 0
     while True:
          n += 1
          g = grad_F(x)
          x = x - [l * g[0], l * g[1], l * g[2], l * g[3]]
          if abs(l * g[0]) + abs(l * g[1]) + abs(l * g[2]) + abs(l * g[3]) < e:
               break

     print('Метод наискорейшего спуска: ')
     for i in range (4):
          print(x[i])
     print(n)


def conj_grad(A, x, e):
     n = 0
     beta = 0
     g = grad_F(x)
     p = [-g[0], -g[1], -g[2], -g[3]]
     c = (g[0] ** 2 + g[1] ** 2 + g[2] ** 2 + g[3] ** 2)
     while True:
          n += 1
          h = A.dot(p)
          alf = c / (h.dot(p))
          xn = x + [alf * p[0], alf * p[1], alf * p[2], alf * p[3]]
          if abs(alf * p[0]) + abs(alf * p[1]) + abs(alf * p[2]) + abs(alf * p[3]) < e:
               break
          gn = grad_F(xn)
          cn = (gn[0] ** 2 + gn[1] ** 2 + gn[2] ** 2 + gn[3] ** 2)
          beta = cn / c
          pn = [-gn[0] + beta * p[0], -gn[1] + beta * p[1], -gn[2] + beta * p[2], -gn[3] + beta * p[3]]
          x = xn
          g = gn
          p = pn
          c = cn

     print('Метод сопряженных градиентов: ')
     for i in range (4):
          print(xn[i])
     print(n)


e = 0.001
x = np.array([0, 0, 0, 0])

Q = [[1.6, -1, 0, 1],
     [-1, 4.6, 1, 0],
     [0, 1, 5.6, 0],
     [1, 0, 0, 2]]

A = np.array([[3.2, -2, 0, 2],
     [-2, 9.2, 2, 0],
     [0, 2, 11.2, 0],
     [2, 0, 0, 4]])

l = [2.2, -1, 0.8, 3]

conj_grad(A, x, e)
fast(A, x, e)
